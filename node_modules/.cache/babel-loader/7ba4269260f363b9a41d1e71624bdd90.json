{"ast":null,"code":"var days;\n\n(function (days) {\n  days[days[\"Sunday\"] = 0] = \"Sunday\";\n  days[days[\"Monday\"] = 1] = \"Monday\";\n  days[days[\"Tuesday\"] = 2] = \"Tuesday\";\n  days[days[\"Wednesday\"] = 3] = \"Wednesday\";\n  days[days[\"Thursday\"] = 4] = \"Thursday\";\n  days[days[\"Friday\"] = 5] = \"Friday\";\n  days[days[\"Saturday\"] = 6] = \"Saturday\";\n})(days || (days = {}));\n\nclass Calendar {\n  getDateColumns() {\n    let tempArray = [];\n    const currentMonthFirstDay = new Date(this.date.getFullYear(), this.date.getMonth(), 1);\n    const currentMonthLastDay = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 0);\n    const columnsStartDate = currentMonthFirstDay.getDay() === days.Sunday ? new Date(this.date.getFullYear(), this.date.getMonth(), -5) : new Date(this.date.getFullYear(), this.date.getMonth(), days.Monday - currentMonthFirstDay.getDay() + 1);\n    const columnStopDate = currentMonthLastDay.getDay() === days.Sunday ? currentMonthLastDay : new Date(this.date.getFullYear(), this.date.getMonth(), currentMonthLastDay.getDate() + (7 - currentMonthLastDay.getDay()));\n    console.log(columnsStartDate, columnStopDate);\n    return tempArray;\n  }\n\n  constructor() {\n    let _date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n\n    this.date = void 0;\n    this.daysColumns = void 0;\n    this.date = _date;\n    this.daysColumns = {\n      Sunday: this.getDateColumns(days.Sunday),\n      Monday: this.getDateColumns(days.Monday),\n      Tuesday: this.getDateColumns(days.Tuesday),\n      Wednesday: this.getDateColumns(days.Wednesday),\n      Thursday: this.getDateColumns(days.Thursday),\n      Friday: this.getDateColumns(days.Friday),\n      Saturday: this.getDateColumns(days.Saturday)\n    };\n  }\n\n}\n\nexport default Calendar;","map":{"version":3,"sources":["C:/Users/ataka/Desktop/calendar/src/Classes/calendarClass/index.tsx"],"names":["days","Calendar","getDateColumns","tempArray","currentMonthFirstDay","Date","date","getFullYear","getMonth","currentMonthLastDay","columnsStartDate","getDay","Sunday","Monday","columnStopDate","getDate","console","log","constructor","_date","daysColumns","Tuesday","Wednesday","Thursday","Friday","Saturday"],"mappings":"IAEKA,I;;WAAAA,I;AAAAA,EAAAA,I,CAAAA,I;AAAAA,EAAAA,I,CAAAA,I;AAAAA,EAAAA,I,CAAAA,I;AAAAA,EAAAA,I,CAAAA,I;AAAAA,EAAAA,I,CAAAA,I;AAAAA,EAAAA,I,CAAAA,I;AAAAA,EAAAA,I,CAAAA,I;GAAAA,I,KAAAA,I;;AAWL,MAAMC,QAAN,CAAe;AAWHC,EAAAA,cAAc,GAAG;AACrB,QAAIC,SAAsB,GAAG,EAA7B;AACA,UAAMC,oBAAoB,GAAG,IAAIC,IAAJ,CAAS,KAAKC,IAAL,CAAUC,WAAV,EAAT,EAAkC,KAAKD,IAAL,CAAUE,QAAV,EAAlC,EAAwD,CAAxD,CAA7B;AACA,UAAMC,mBAAmB,GAAG,IAAIJ,IAAJ,CAAS,KAAKC,IAAL,CAAUC,WAAV,EAAT,EAAkC,KAAKD,IAAL,CAAUE,QAAV,KAAuB,CAAzD,EAA4D,CAA5D,CAA5B;AACA,UAAME,gBAAgB,GAAGN,oBAAoB,CAACO,MAArB,OAAkCX,IAAI,CAACY,MAAvC,GACnB,IAAIP,IAAJ,CAAS,KAAKC,IAAL,CAAUC,WAAV,EAAT,EAAkC,KAAKD,IAAL,CAAUE,QAAV,EAAlC,EAAwD,CAAC,CAAzD,CADmB,GAEnB,IAAIH,IAAJ,CAAS,KAAKC,IAAL,CAAUC,WAAV,EAAT,EAAkC,KAAKD,IAAL,CAAUE,QAAV,EAAlC,EAAyDR,IAAI,CAACa,MAAL,GAAcT,oBAAoB,CAACO,MAArB,EAAf,GAAgD,CAAxG,CAFN;AAGA,UAAMG,cAAc,GAAGL,mBAAmB,CAACE,MAApB,OAAiCX,IAAI,CAACY,MAAtC,GACjBH,mBADiB,GAEjB,IAAIJ,IAAJ,CAAS,KAAKC,IAAL,CAAUC,WAAV,EAAT,EAAkC,KAAKD,IAAL,CAAUE,QAAV,EAAlC,EAAwDC,mBAAmB,CAACM,OAApB,MAAiC,IAAIN,mBAAmB,CAACE,MAApB,EAArC,CAAxD,CAFN;AAGAK,IAAAA,OAAO,CAACC,GAAR,CAAYP,gBAAZ,EAA8BI,cAA9B;AACA,WAAOX,SAAP;AACH;;AACDe,EAAAA,WAAW,GAA2B;AAAA,QAA1BC,KAA0B,uEAAZ,IAAId,IAAJ,EAAY;;AAAA,SAvBtCC,IAuBsC;AAAA,SAtBtCc,WAsBsC;AAClC,SAAKd,IAAL,GAAYa,KAAZ;AACA,SAAKC,WAAL,GAAmB;AACfR,MAAAA,MAAM,EAAE,KAAKV,cAAL,CAAoBF,IAAI,CAACY,MAAzB,CADO;AAEfC,MAAAA,MAAM,EAAE,KAAKX,cAAL,CAAoBF,IAAI,CAACa,MAAzB,CAFO;AAGfQ,MAAAA,OAAO,EAAE,KAAKnB,cAAL,CAAoBF,IAAI,CAACqB,OAAzB,CAHM;AAIfC,MAAAA,SAAS,EAAE,KAAKpB,cAAL,CAAoBF,IAAI,CAACsB,SAAzB,CAJI;AAKfC,MAAAA,QAAQ,EAAE,KAAKrB,cAAL,CAAoBF,IAAI,CAACuB,QAAzB,CALK;AAMfC,MAAAA,MAAM,EAAE,KAAKtB,cAAL,CAAoBF,IAAI,CAACwB,MAAzB,CANO;AAOfC,MAAAA,QAAQ,EAAE,KAAKvB,cAAL,CAAoBF,IAAI,CAACyB,QAAzB;AAPK,KAAnB;AASH;;AAnCU;;AAwCf,eAAexB,QAAf","sourcesContent":["\r\n\r\nenum days {\r\n    Sunday,\r\n    Monday,\r\n    Tuesday,\r\n    Wednesday,\r\n    Thursday,\r\n    Friday,\r\n    Saturday\r\n}\r\n\r\n\r\nclass Calendar {\r\n    date: Date\r\n    daysColumns: {\r\n        Sunday: Array<Date>,\r\n        Monday: Array<Date>,\r\n        Tuesday: Array<Date>,\r\n        Wednesday: Array<Date>,\r\n        Thursday: Array<Date>,\r\n        Friday: Array<Date>,\r\n        Saturday: Array<Date>\r\n    }\r\n    private getDateColumns() {\r\n        let tempArray: Array<Date> = []\r\n        const currentMonthFirstDay = new Date(this.date.getFullYear(), this.date.getMonth(), 1)\r\n        const currentMonthLastDay = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 0)\r\n        const columnsStartDate = currentMonthFirstDay.getDay() === days.Sunday\r\n            ? new Date(this.date.getFullYear(), this.date.getMonth(), -5)\r\n            : new Date(this.date.getFullYear(), this.date.getMonth(), (days.Monday - currentMonthFirstDay.getDay()) + 1)\r\n        const columnStopDate = currentMonthLastDay.getDay() === days.Sunday\r\n            ? currentMonthLastDay\r\n            : new Date(this.date.getFullYear(), this.date.getMonth(), currentMonthLastDay.getDate() + (7 - currentMonthLastDay.getDay()))\r\n        console.log(columnsStartDate, columnStopDate)\r\n        return tempArray\r\n    }\r\n    constructor(_date: Date = new Date()) {\r\n        this.date = _date\r\n        this.daysColumns = {\r\n            Sunday: this.getDateColumns(days.Sunday),\r\n            Monday: this.getDateColumns(days.Monday),\r\n            Tuesday: this.getDateColumns(days.Tuesday),\r\n            Wednesday: this.getDateColumns(days.Wednesday),\r\n            Thursday: this.getDateColumns(days.Thursday),\r\n            Friday: this.getDateColumns(days.Friday),\r\n            Saturday: this.getDateColumns(days.Saturday)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Calendar"]},"metadata":{},"sourceType":"module"}